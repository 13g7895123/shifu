version: '3.8'

services:
  # Frontend (React)
  luckygo-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: luckygo-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      luckygo-api:
        condition: service_healthy
    networks:
      - luckygo-network
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost:3001}
      - REACT_APP_API_URL=http://${DOMAIN_NAME:-localhost:3001}

  # Backend API
  luckygo-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: luckygo-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_URL=redis://redis:6379
      - FRONTEND_URL=http://localhost:80
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - luckygo-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: luckygo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    networks:
      - luckygo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Redis Commander (Web UI for Redis) - Development only
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: luckygo-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - luckygo-network
    profiles:
      - development

  # Nginx reverse proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: luckygo-nginx
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      luckygo-frontend:
        condition: service_started
      luckygo-api:
        condition: service_healthy
    networks:
      - luckygo-network
    profiles:
      - production

networks:
  luckygo-network:
    driver: bridge
    name: luckygo-network

volumes:
  redis-data:
    driver: local
    name: luckygo-redis-data
  app-logs:
    driver: local
    name: luckygo-app-logs
