# Production values for luckygo.
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

global:
  imageRegistry: "your-registry.com/"
  imagePullSecrets:
    - name: registry-secret

# Application configuration
app:
  name: luckygo
  version: "1.0.0"

# Frontend configuration
frontend:
  enabled: true
  image:
    registry: ""
    repository: "luckygo/frontend"
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector:
    kubernetes.io/os: linux
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - frontend
          topologyKey: kubernetes.io/hostname

# Backend API configuration
backend:
  enabled: true
  image:
    registry: ""
    repository: "luckygo/backend"
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 3001
    targetPort: 3001
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector:
    kubernetes.io/os: linux
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - backend
          topologyKey: kubernetes.io/hostname
  
  env:
    NODE_ENV: production
    PORT: "3001"
  
  # Health check configuration
  healthCheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "CHANGE-THIS-SECURE-REDIS-PASSWORD"
  
  master:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"  # Use your storage class
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    
    nodeSelector:
      kubernetes.io/os: linux
  
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"  # Use your storage class
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    
    nodeSelector:
      kubernetes.io/os: linux

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  
  hosts:
    - host: your.domain
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
        - path: /socket.io
          pathType: Prefix
          service: backend
  
  tls:
    - secretName: luckygo-tls
      hosts:
        - your.domain

# Service Account
serviceAccount:
  create: true
  annotations:
    # Add any cloud provider specific annotations here
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Secrets
secrets:
  # IMPORTANT: Change these in production!
  jwtSecret: "CHANGE-THIS-JWT-SECRET-KEY-IN-PRODUCTION"
  redisPassword: "CHANGE-THIS-SECURE-REDIS-PASSWORD"

# Persistence for logs and data
persistence:
  enabled: true
  storageClass: "fast-ssd"  # Use your storage class
  accessMode: ReadWriteOnce
  size: 50Gi
  mountPath: /app/logs

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Monitoring
monitoring:
  enabled: false  # Enable if you have Prometheus
  serviceMonitor:
    enabled: false
    interval: 30s
    path: /metrics

# Testing
tests:
  enabled: true
  image:
    repository: busybox
    tag: "1.35"
    pullPolicy: IfNotPresent
