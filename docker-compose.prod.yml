version: '3.8'

# ========================================
# LuckyGo 生產環境 Docker Compose
# ========================================
# 使用方式：
#   docker compose -f docker-compose.prod.yml up -d
# 或使用部署腳本：
#   ./production.sh
# ========================================

services:
  # ==========================================
  # Frontend (React) - 生產環境
  # ==========================================
  luckygo-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: luckygo-frontend-prod
    restart: always
    ports:
      - "${FRONTEND_PORT:-80}:8080"
    depends_on:
      luckygo-api:
        condition: service_healthy
    networks:
      - luckygo-network
    env_file:
      - .env.prod
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost:3001}
      - REACT_APP_BACKEND_API_URL=${BACKEND_API_URL:-http://localhost:3001}
      - REACT_APP_API_URL=http://${DOMAIN_NAME:-localhost:3001}
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.luckygo.service=frontend"
      - "com.luckygo.environment=production"

  # ==========================================
  # Backend API - 生產環境
  # ==========================================
  luckygo-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: luckygo-api-prod
    restart: always
    ports:
      - "${BACKEND_PORT:-3001}:${BACKEND_PORT:-3001}"
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - PORT=${BACKEND_PORT:-3001}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:80}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - REPOSITORY_TYPE=${REPOSITORY_TYPE:-sqlite}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - luckygo-network
    volumes:
      - app-logs:/app/logs
      - app-data:/app/data
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${BACKEND_PORT:-3001}/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 生產環境資源限制
    deploy:
      resources:
        limits:
          cpus: '${BACKEND_CPU_LIMIT:-2}'
          memory: ${BACKEND_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${BACKEND_CPU_RESERVATION:-1}'
          memory: ${BACKEND_MEMORY_RESERVATION:-1G}
    labels:
      - "com.luckygo.service=backend"
      - "com.luckygo.environment=production"

  # ==========================================
  # Redis - 生產環境
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: luckygo-redis-prod
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    env_file:
      - .env.prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - luckygo-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    # 生產環境資源限制
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-1}'
          memory: ${REDIS_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "com.luckygo.service=redis"
      - "com.luckygo.environment=production"

  # ==========================================
  # Redis Commander - 僅 Debug 模式
  # ==========================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: luckygo-redis-commander-prod
    restart: unless-stopped
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    env_file:
      - .env.prod
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - luckygo-network
    # 僅在 debug profile 下啟動
    profiles:
      - debug
    labels:
      - "com.luckygo.service=redis-commander"
      - "com.luckygo.environment=production"
      - "com.luckygo.profile=debug"

  # ==========================================
  # Nginx Reverse Proxy - HTTPS (可選)
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: luckygo-nginx-prod
    restart: always
    ports:
      - "${FRONTEND_PORT_SSL:-443}:443"
    env_file:
      - .env.prod
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_CERT_PATH:-./ssl/cert.pem}:/etc/nginx/ssl/cert.pem:ro
      - ${SSL_KEY_PATH:-./ssl/key.pem}:/etc/nginx/ssl/key.pem:ro
    depends_on:
      luckygo-frontend:
        condition: service_healthy
      luckygo-api:
        condition: service_healthy
    networks:
      - luckygo-network
    # 僅在啟用 SSL 時啟動
    profiles:
      - ssl
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "https://localhost:443"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.luckygo.service=nginx"
      - "com.luckygo.environment=production"
      - "com.luckygo.profile=ssl"

# ==========================================
# Networks
# ==========================================
networks:
  luckygo-network:
    driver: bridge
    name: luckygo-network-prod
    labels:
      - "com.luckygo.environment=production"

# ==========================================
# Volumes - 生產環境持久化
# ==========================================
volumes:
  redis-data:
    driver: local
    name: luckygo-redis-data-prod
    labels:
      - "com.luckygo.service=redis"
      - "com.luckygo.environment=production"

  app-logs:
    driver: local
    name: luckygo-app-logs-prod
    labels:
      - "com.luckygo.service=backend"
      - "com.luckygo.environment=production"

  app-data:
    driver: local
    name: luckygo-app-data-prod
    labels:
      - "com.luckygo.service=backend"
      - "com.luckygo.environment=production"
      - "com.luckygo.data=sqlite"
